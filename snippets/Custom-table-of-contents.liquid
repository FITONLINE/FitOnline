{% style %}
  .toc-container-wrapper {
    position: sticky;
    top: 160px;
  }
  .toc-container {
    margin: 0 0 4rem 0;
    padding: 0 0 4rem 0;
    max-height: 500px;
    overflow: scroll;
  }
  .toc-close-btn {
    display: none;
  }
  .toc-list {
    margin: 0;
    padding-left: 1rem;
    list-style-type: none;
  }
  .toc-item {
    margin-bottom: 0.5rem;
    padding-left: 2rem;
    text-indent: -2rem;
  }
  .toc-item-h3 {
    margin-left: 3rem;
    font-size: 1.4rem;
    padding-left: 3.5rem;
    text-indent: -3.5rem;
  }
  .toc-item a {
    color: #333;
    text-decoration: none;
    transition: color 0.3s;
  }
  .toc-item a:hover {
    color: #0a1e27;
    text-decoration: underline;
  }

  .toc-overlay {
    display: none;
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.5);
    z-index: 999;
    opacity: 0;
    transition: opacity 0.3s ease;
  }
  .toc-overlay.active {
    display: block;
    opacity: 1;
  }
  @media screen and (max-width: 999px) {
    .toc-container-wrapper {
      position: unset;
    }
    .toc-container {
      margin-top: 0;
      position: fixed;
      top: 0;
      right: -100%;
      width: 80%;
      height: 100%;
      max-height: 100%;
      background-color: #fff;
      z-index: 1000;
      box-shadow: -2px 0 5px rgba(0, 0, 0, 0.2);
      transition: right 0.3s ease;
      padding: 20px;
      overflow-y: auto;
    }
    .toc-title {
      display: none;
    }
    .toc-close-btn.close-btn-active {
      display: block;
    }
    .toc-container.active {
      right: 0;
    }
    .toc-close-btn {
      position: absolute;
      top: 10px;
      right: 10px;
      font-size: 24px;
      background: none;
      border: none;
      cursor: pointer;
      color: #0a1e27;
    }
  }
{% endstyle %}

<div class="toc-container-wrapper">
  <div id="toc-overlay" class="toc-overlay"></div>
  <h3 class="toc-title">目次</h3>
  <div id="table-of-contents" class="toc-container">
    <button class="toc-close-btn" id="toc-close-btn">×</button>
  </div>

<script defer="defer">
  // 目次を自動生成する関数
  document.addEventListener('DOMContentLoaded', function () {
    // 記事コンテンツを取得
    const contentDiv = document.querySelector('.article-template__content');
    if (!contentDiv) return;

    // h2とh3要素を取得
    const headings = contentDiv.querySelectorAll('h2, h3');
    if (headings.length === 0) return;

    // サイドバーの目次コンテナを取得
    const tocContainer = document.querySelector('#table-of-contents');
    if (!tocContainer) return;

    // 目次リストを作成
    const tocList = document.createElement('ul');
    tocList.className = 'toc-list';

    // インデックス管理用の変数
    let h2Index = 0;
    let h3Index = 0;
    let currentH2 = 0;

    // 各見出しに対して処理
    headings.forEach((heading, index) => {
      // 見出しのテキストを取得
      const headingText = heading.textContent.trim();

      // 見出しのレベルを判定
      const isH3 = heading.tagName.toLowerCase() === 'h3';

      // インデックスを更新
      if (!isH3) {
        h2Index++;
        currentH2 = h2Index;
        h3Index = 0;
      } else {
        h3Index++;
      }

      // インデックス付きのテキストを作成
      const indexedText = isH3 ? `${currentH2}-${h3Index}. ${headingText}` : `${h2Index}. ${headingText}`;

      // IDを作成（日本語を含む場合に対応するため、インデックスも追加）
      const headingId = headingText.replace(/\s+/g, '-').replace(/[^\w\-]/g, '') + '-' + index;

      // 見出しにIDを設定
      heading.id = headingId;

      // 目次アイテムを作成
      const listItem = document.createElement('li');
      listItem.className = isH3 ? 'toc-item toc-item-h3' : 'toc-item';

      const link = document.createElement('a');
      link.href = '#' + headingId;
      link.textContent = indexedText;

      listItem.appendChild(link);
      tocList.appendChild(listItem);
    });

    tocContainer.appendChild(tocList);

    // モバイル用の目次表示機能
    const tocBtn = document.getElementById('table-of-contents-btn');
    const closeBtn = document.getElementById('toc-close-btn');
    const overlay = document.getElementById('toc-overlay');

    if (tocBtn && window.innerWidth <= 999) {
      // 閉じるボタンを表示
      closeBtn.classList.add('close-btn-active');

      // 目次ボタンクリックイベント
      tocBtn.addEventListener('click', function (e) {
        e.preventDefault();
        tocContainer.classList.add('active');
        overlay.classList.add('active');
        document.body.style.overflow = 'hidden'; // スクロール防止
      });

      // 閉じるボタンクリックイベント
      closeBtn.addEventListener('click', function () {
        tocContainer.classList.remove('active');
        overlay.classList.remove('active');
        document.body.style.overflow = ''; // スクロール再開
      });

      // 目次内のリンククリック時に目次を閉じる
      const tocLinks = tocContainer.querySelectorAll('a');
      tocLinks.forEach((link) => {
        link.addEventListener('click', function () {
          tocContainer.classList.remove('active');
          overlay.classList.remove('active');
          document.body.style.overflow = '';
        });
      });

      // オーバーレイクリックで閉じる
      overlay.addEventListener('click', function () {
        tocContainer.classList.remove('active');
        overlay.classList.remove('active');
        document.body.style.overflow = '';
      });

      // 画面外クリックで閉じる
      document.addEventListener('click', function (e) {
        if (!tocContainer.contains(e.target) && e.target !== tocBtn && tocContainer.classList.contains('active')) {
          tocContainer.classList.remove('active');
          overlay.classList.remove('active');
          document.body.style.overflow = '';
        }
      });
    }
  });
</script>
